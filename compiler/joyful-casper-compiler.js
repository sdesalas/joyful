
var fs = require("fs");

var variable = function(item) {
	if (item.indexOf("@") === 0) {
		return 'vars["' + item.substr(1) + '"]';
	} else {
		return item;
	}
}

exports.compile = function(src, vars, nowrap) {

	// Split by line
	var errMsg, errCol, words, line, match, screenshot = 1;
		output = [],  asserts = 0, lines = src.split('\n');

	output.add = function() {
		// Add formatted text 
		// ie output.add("This is {0} line of {1} text", 1, "cool");
		if (arguments.length > 1) {
		    var str = arguments[0], args = Array.prototype.slice.call(arguments, 1);
		    this.push(' ' + str.replace(/{(\d+)}/g, function(match, number) { 
		      return typeof args[number] != 'undefined'
		        ? args[number]
		        : match
		      ;
		    }));
		} else {
			// No parameters? 
			// Use first argument or empty string
			this.push(arguments[0] || "");
		}
	};
	console.log('Total of ' + lines.length + ' lines..');

	if (lines.length) {
		for(var i = 0; i < lines.length; i++) {
			// Trim line
			line = lines[i].replace(/(?:(?:^|\n)\s+|\s+(?:$|\n))/g,'').replace(/\s+/g,' ');
			// Remove comments at the end
			line = line.indexOf("--") ? line.substr(0, line.indexOf("--")) : line;
			// How many words?
			words = line.split(' ');
			if (words && words.length) {
				// COMMENT
				if (line.match(/^\s*(\-\-)/)) {
					output.push(line.replace("--", "//"));
				}				
				// BLANK LINE
				if (line === '') {
					output.push('');
				}
				// SET
				match = line.match(/^SET @(\w+) = ("[^"]*"|@\w+)$/i);
				if (match) {
					// HAVE WE PRESET ANY VARIABLES ALREADY?
					var varname = match[1], varvalue = match[2];
					if (vars && typeof vars[varname] !== 'undefined') varvalue = '\"' + vars[varname] + '\"';
					output.add('vars["{0}"] = {1};', varname, varvalue);
				}
				// GO TO "string"
				match = line.match(/^GO TO ("[^"]*"|@\w+)$/i);
				if (match) {
					output.add('casper.thenOpen({0}, function() {test.assertUrlMatch({0}, \'{1}\')});', variable(match[1]), line);
					asserts++;
				}
				// CLICK "string" AND WRITE "string"
				match = line.match(/^CLICK ("[^"]*"|@\w+) AND WRITE ("[^"]*"|@\w+)$/i);
				if (match) {
					output.add(
						'casper.then(function() {' + 
							'var element = this.evaluate(function(selector, value) {' + 
								'var e = document.querySelector(selector);' +
								'if (e) {e.value = value; return e;}' +
							'}, {0}, {1}); ' +
							'test.assert(!!element, \'{2}\');' +  
						'});', 
					variable(match[1]), variable(match[2]), line);
					asserts++;
				}
				// CLICK "string"
				match = line.match(/^CLICK ("[^"]*"|@\w+)$/i);
				if (match) {
					output.add(
						'casper.then(function() {' + 
							'test.assertVisible({0}, \'{1}\');' + 
						'}).thenClick({0});', 
					variable(match[1]), line);
					asserts++;
				}
				// CHECK "string" EXISTS
				match = line.match(/^CHECK ("[^"]*"|@\w+) (NOT )?EXISTS$/i);
				if (match) {
					output.add(
						'casper.then(function() {' + 
							'test.assert{1}Visible({0}, \'{2}\');' + 
						'});', 
					variable(match[1]), match[2] ? "Not" : "", line);
					asserts++;
				}
				// TAKE SCREENSHOT
				match = line.match(/^TAKE SCREENSHOT\s*("[^"]*"|@\w+)?$/i);
				if (match) {
					output.add('casper.then(function() {casper.capture({0});});', match[1] ? variable(match[1]) : '"screenshot-' + (screenshot++) + '.png"');
				}
				// EXECUTE
				match = line.match(/^EXECUTE\s*("[^"]*"|@\w+)?$/i);
				if (match) {
					if (fs.exists(match[1].substr(1, match[1].length - 2))); {
						output.add(' // Loading file ' + match[1]);
					}
				}
			}

			if (output.length - 1 !== i) {
				errMsg = "";
				// Find column
				if (line.indexOf(';') == line.length - 1) { errCol = line.length; errMsg = "Did you place a semicolon at the end of the line?"; }
				// Throw syntax error
				throw new Error('Line ' + (i + 1) + ': Syntax error. ' + errMsg + '\n ' + Array(errCol).join(" ") + '(!)\n  ' + line + '\n');
			}
		}
	}

	// Should we wrap it all up into a casper test?
	if (!nowrap) {

		// Add lines at start of script
		output.unshift(
			'',
			'// Commence autogenerated casperjs script',
			'vars = {};',
			'',
			'casper.test.begin("Suite Name", ' + (asserts || 0) + ', function suite(test) {',
			'',
			' casper.start("about:blank", function() {this.viewport(800, 600);});',
			'');

		// Add lines at end of script
		output.push(
			' casper.run(function() {test.done();});',
			'',
			'});',
			'');
	}

	// Return compiled script
	return output.join("\n");
}

